---
version: 2.1

workflows:
  pull_request:
    jobs:
      - build:
          name: build and unit tests
          filters: {branches:{ignore:[master]}}
      - infrastructure:
          name: plan infra development
          requires: [build]
          tf_workspace: development
          tf_command: plan
          filters: {branches:{ignore:[master]}}
      - cleanup:
          name: destroy branch environment
          filters: {branches:{ignore:[master]}}
  master:
    jobs:
      - build:
          name: build and unit tests master
          filters: {branches:{only:[master]}}
      - reset_sirius:
          name: reset the sirius fixtures
          tf_workspace: development
          filters: {branches:{only:[master]}}
      - infrastructure:
          name: build infra development
          requires: [build and unit tests master]
          tf_workspace: development
          tf_command: apply
          filters: {branches:{only:[master]}}
      - infrastructure:
          name: build infra preproduction
          requires: [build infra development]
          tf_workspace: preproduction
          tf_command: apply
          filters: {branches:{only:[master]}}

orbs:
  aws-cli: circleci/aws-cli@1.3.0
  dockerhub_helper:
    orbs:
      docker: circleci/docker@1.4.0
    commands:
      dockerhub_login:
        steps:
          - docker/install-docker-credential-helper
          - docker/check:
              docker-password: DOCKER_ACCESS_TOKEN # pragma: allowlist secret
              docker-username: DOCKER_USER
  terraform:
    executors:
      terraform:
        docker:
          - image: circleci/golang:1.12
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
        resource_class: small
        environment:
          TF_VERSION: 0.13.5
          TF_SHA256SUM: f7b7a7b1bfbf5d78151cfe3d1d463140b5fd6a354e71a7de2b5644e652ca5147 # pragma: allowlist secret
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
    commands:
      install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin
  migration:
    executors:
      python:
        docker:
          - image: circleci/python:3
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
jobs:
  cleanup:
    executor: migration/python
    steps:
      - run:
          name: cleanup
          command: echo "running this so job passes as it's requirement to merge"
  reset_sirius:
    executor: terraform/terraform
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: "development"
    working_directory: ~/project/terraform
    steps:
      - checkout:
          path: ~/project
      - terraform/install
      - run:
         name: Initialize
         command: terraform init
      - run:
          name: Get template file
          command: |
            # Image tag is not important but is needed for build
            export TF_VAR_image_tag=fake-tag
            terraform apply -target=local_file.output
      - run:
          name: Install ecs-runner
          command: |
            wget https://github.com/ministryofjustice/opg-ecs-helper/releases/download/v0.2.0/opg-ecs-helper_Linux_x86_64.tar.gz -O $HOME/opg-ecs-helper.tar.gz
            sudo tar -xvf $HOME/opg-ecs-helper.tar.gz -C /usr/local/bin
            sudo chmod +x /usr/local/bin/ecs-stabilizer
            sudo chmod +x /usr/local/bin/ecs-runner
      - run:
          name: Reset Api
          command: ecs-runner -task reset-api -timeout 600
      - run:
          name: Migrate Api
          command: ecs-runner -task migrate-api -timeout 600
      - run:
          name: Import Fixtures to Api
          command: ecs-runner -task import-fixtures-api -timeout 600
  build:
    executor: migration/python
    resource_class: small
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - dockerhub_helper/dockerhub_login
      - setup_remote_docker
      - aws-cli/install
      - checkout
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Set version
          command: |
            export VERSION=${TF_WORKSPACE}-${CIRCLE_SHA1:0:7}
            echo "export VERSION=${VERSION}" >> $BASH_ENV
            echo "$VERSION" >> ~/project/VERSION
      - persist_to_workspace:
          root: .
          paths:
            - VERSION
      - run:
          name: Show version
          command: echo ${VERSION}
      - run:
          name: Run unit tests
          command: |
            export PYTHONPATH=~/project/migration_steps/transform_casrec/:~/project/migration_steps/transform_casrec/app
            pip3 install -r migration_steps/transform_casrec/tests/requirements.txt
            python3 -m pytest migration_steps/transform_casrec/tests
      - run:
          name: Docker login
          command: aws ecr get-login-password --region $AWS_REGION --profile sirius-ci | docker login --username AWS --password-stdin $AWS_REGISTRY
      - run:
          name: Build base image
          command: docker build base_image -t opg_casrec_migration_base_image:latest
      - run:
          name: Build images
          command: docker-compose -f docker-compose.ci.yml build --parallel
      - run:
          name: Push images
          command: docker-compose -f docker-compose.ci.yml push
  infrastructure:
    executor: terraform/terraform
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        type: string
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/terraform
    steps:
      - checkout:
          path: ~/project
      - terraform/install
      - attach_workspace: {at: ~/project}
      - run:
          name: Initialize
          command: terraform init
      - run:
          name: Set environment
          command: |
            ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Run << parameters.tf_command >>
          command: terraform << parameters.tf_command >>
      - run:
          name: Output
          command: terraform output -json > terraform.output.json
