---
version: 2.1

parameters:
  run_main:
    type: boolean
    default: true
  run_preprod:
    type: boolean
    default: false
  run_preqa:
    type: boolean
    default: false
  run_qa:
    type: boolean
    default: false
  run_production_1:
    type: boolean
    default: false
  run_production_2:
    type: boolean
    default: false
  run_production_3:
    type: boolean
    default: false
  run_rehearsal_1:
    type: boolean
    default: false
  run_rehearsal_2:
    type: boolean
    default: false
  run_rehearsal_3:
    type: boolean
    default: false
  override_tag:
    type: string
    default: ""

workflows:
  dependabot_request:
    when:
      and:
        - matches: {pattern: "^dependabot/.+$", value: << pipeline.git.branch >>}
        - << pipeline.parameters.run_main >>
    jobs:
      - build_short:
          name: build and unit tests dependabot
      - job_complete:
          name: job complete notification
          requires: [build and unit tests dependabot]
          workspace: development

  pull_request:
    when:
      and:
        - not: {matches: {pattern: "^dependabot/.+$", value: << pipeline.git.branch >>}}
        - not: {equal: [main, << pipeline.git.branch >>]}
        - << pipeline.parameters.run_main >>
    jobs:
      - persist_parameters:
          name: persist parameters development
          param_workspace: development
          environment_title: Development-Branch
      - manage_workflow:
          requires: [persist parameters development]
          name: manage workflow
      - reset_sirius:
          name: reset the sirius fixtures development
          requires: [manage workflow]
          tf_workspace: development
      - build:
          name: build and unit tests
          requires: [manage workflow, persist parameters development]
      - infrastructure:
          name: build shared infra development
          requires: [build and unit tests]
          tf_workspace: development
          tf_command: apply
          folder: shared
      - load_casrec_db:
          name: load casrec db
          requires: [build shared infra development]
      - infrastructure:
          name: plan infra development
          requires: [build shared infra development]
          tf_workspace: development
          tf_command: plan
      - infrastructure:
          name: build infra development
          requires: [plan infra development]
          tf_workspace: development
          tf_command: apply
      - scale-services:
          name: scale down poller service for migration development
          requires: [reset the sirius fixtures development]
          replicas: "0"
          profile: "migrations-ci-sirius-dev"
          service: "notify-poller"
          cluster: "casmigrate"
      - run_tasks:
          name: migration - run all tasks development
          requires: [
            build infra development,
            load casrec db,
            reset the sirius fixtures development,
            scale down poller service for migration development
          ]
          tf_workspace: development
      - scale-services:
          name: scale up poller service for migration development
          requires: [migration - run all tasks development]
          replicas: "1"
          profile: "migrations-ci-sirius-dev"
          service: "notify-poller"
          cluster: "casmigrate"
      - run_elasticsearch_reset:
          name: full reindex elasticsearch development
          requires: [migration - run all tasks development]
          tf_workspace: development
      - job_complete:
          name: job complete notification
          requires: [migration - run all tasks development]
          workspace: development

  main:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_main >>
    jobs:
      - persist_parameters:
          name: persist parameters main
          param_workspace: development
          environment_title: Development-Merge
      - build:
          name: build and unit tests main
          requires: [persist parameters main]
      - approve:
          name: approve preproduction kick off
          type: approval
          requires: [build and unit tests main]
      - kick_off_environment:
          name: kick off preproduction
          workspace: preproduction
          requires: [approve preproduction kick off]

  preprod:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_preprod >>
    jobs:
      - persist_parameters:
          name: persist parameters preproduction
          param_workspace: preproduction
          environment_title: Preproduction-Manual
      - reset_sirius_full_restore:
          name: run and monitor jenkins restore job preproduction
          requires: [persist parameters preproduction]
          sirius_environment: casrecdmpp
      - get_latest_image:
          name: get latest tag preproduction
          requires: [persist parameters preproduction]
          image_tag: main
      - infrastructure:
          name: build shared infra preproduction
          requires: [get latest tag preproduction]
          tf_workspace: preproduction
          tf_command: apply
          folder: shared
      - infrastructure:
          name: plan infra preproduction
          requires: [build shared infra preproduction]
          tf_workspace: preproduction
          tf_command: plan
      - infrastructure:
          name: build infra preproduction
          requires: [plan infra preproduction]
          tf_workspace: preproduction
          tf_command: apply
      - scale-services:
          name: scale down poller service for migration preproduction
          requires: [run and monitor jenkins restore job preproduction]
          replicas: "0"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmpp"
      - run_task:
          name: migration - initialise environments 1 preproduction
          requires: [
            build infra preproduction,
            run and monitor jenkins restore job preproduction,
            scale down poller service for migration preproduction
         ]
          runner_command: migration-initialise-pre-delete
          tf_workspace: preproduction
      - run_task:
          name: migration - load casrec preproduction
          requires: [migration - initialise environments 1 preproduction]
          tf_workspace: preproduction
          runner_command: migration-load-casrec
      - run_task:
          name: migration - initialise environments 2 preproduction
          requires: [migration - load casrec preproduction]
          runner_command: migration-initialise-post-delete
          tf_workspace: preproduction
      - run_task:
          name: migration - filter data preproduction
          requires: [migration - initialise environments 2 preproduction]
          tf_workspace: preproduction
          runner_command: migration-filter-data
      - run_task:
          name: migration - transform preproduction
          requires: [migration - filter data preproduction]
          tf_workspace: preproduction
          runner_command: migration-transform
      - run_task:
          name: migration - integration preproduction
          requires: [migration - transform preproduction]
          tf_workspace: preproduction
          runner_command: migration-integration
      - run_task:
          name: migration - load sirius preproduction
          requires: [migration - integration preproduction]
          tf_workspace: preproduction
          runner_command: migration-load-sirius
      - run_task:
          name: migration - validation preproduction
          requires: [migration - load sirius preproduction]
          tf_workspace: preproduction
          runner_command: migration-validation
      - run_task:
          name: migration - response api tests preproduction
          requires: [migration - validation preproduction]
          tf_workspace: preproduction
          runner_command: migration-response-api-tests
      - run_task:
          name: migration - light touch api tests preproduction
          requires: [migration - response api tests preproduction]
          tf_workspace: preproduction
          runner_command: migration-light-touch-api-tests
      - scale-services:
          name: scale up poller service for migration preproduction
          requires: [migration - light touch api tests preproduction]
          replicas: "1"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmpp"
      - run_elasticsearch_reset:
          name: full reindex elasticsearch preprod
          requires: [migration - response api tests preproduction]
          tf_workspace: preproduction
      - tag_image_for_environment:
          name: tag image for qa
          environment_tag: qa
          previous_tag: main
          requires: [migration - response api tests preproduction]
      - approve:
          name: approve qa kick off
          type: approval
          requires: [tag image for qa]
      - kick_off_environment:
          name: kick off qa
          workspace: qa
          requires: [approve qa kick off]
      - approve:
          name: approve preqa kick off
          type: approval
          requires: [tag image for qa]
      - kick_off_environment:
          name: kick off preqa
          workspace: preqa
          requires: [approve preqa kick off]
      - job_complete:
          name: job complete notification
          requires: [
              tag image for qa,
              scale up poller service for migration preproduction
          ]
          workspace: preproduction
  preqa:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_preqa >>
    jobs:
      - persist_parameters:
          name: persist parameters preqa
          param_workspace: preqa
          environment_title: PreQA-Manual
      - get_latest_image:
          name: get latest tag preqa
          requires: [persist parameters preqa]
          image_tag: qa
      - reset_sirius_full_restore:
          name: run and monitor jenkins restore job preqa
          requires: [persist parameters preqa]
          sirius_environment: casrecdmpq
      - infrastructure:
          name: plan infra preqa
          requires: [get latest tag preqa]
          tf_workspace: preqa
          tf_command: plan
      - infrastructure:
          name: build infra preqa
          requires: [plan infra preqa]
          tf_workspace: preqa
          tf_command: apply
      - scale-services:
          name: scale down poller service for migration preqa
          requires: [run and monitor jenkins restore job preqa]
          replicas: "0"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmpq"
      - run_task:
          name: migration - initialise environments 1 preqa
          requires: [
            build infra preqa,
            run and monitor jenkins restore job preqa,
            scale down poller service for migration preqa
         ]
          runner_command: migration-initialise-pre-delete
          tf_workspace: preqa
      - run_task:
          name: migration - load casrec preqa
          requires: [migration - initialise environments 1 preqa]
          tf_workspace: preqa
          runner_command: migration-load-casrec
      - run_task:
          name: migration - initialise environments 2 preqa
          requires: [migration - load casrec preqa]
          runner_command: migration-initialise-post-delete
          tf_workspace: preqa
      - run_task:
          name: migration - filter data preqa
          requires: [migration - initialise environments 2 preqa]
          tf_workspace: preqa
          runner_command: migration-filter-data
      - run_task:
          name: migration - transform preqa
          requires: [migration - filter data preqa]
          tf_workspace: preqa
          runner_command: migration-transform
      - run_task:
          name: migration - integration preqa
          requires: [migration - transform preqa]
          tf_workspace: preqa
          runner_command: migration-integration
      - run_task:
          name: migration - load sirius preqa
          requires: [migration - integration preqa]
          tf_workspace: preqa
          runner_command: migration-load-sirius
      - run_task:
          name: migration - validation preqa
          requires: [migration - load sirius preqa]
          tf_workspace: preqa
          runner_command: migration-validation
      - scale-services:
          name: scale up poller service for migration preqa
          requires: [migration - validation preqa]
          replicas: "1"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmpq"
      - run_elasticsearch_reset:
          name: full reindex elasticsearch preqa
          requires: [migration - validation preqa]
          tf_workspace: preqa
      - job_complete:
          name: job complete notification
          requires: [migration - validation preqa]
          workspace: preqa
  qa:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_qa >>
    jobs:
      - persist_parameters:
          name: persist parameters qa
          param_workspace: qa
          environment_title: QA-Manual
      - reset_sirius_full_restore:
          name: run and monitor jenkins restore job qa
          requires: [persist parameters qa]
          sirius_environment: casrecdmqa
      - get_latest_image:
          name: get latest tag qa
          requires: [persist parameters qa]
          image_tag: qa
      - infrastructure:
          name: plan infra qa
          requires: [get latest tag qa]
          tf_workspace: qa
          tf_command: plan
      - infrastructure:
          name: build infra qa
          requires: [plan infra qa]
          tf_workspace: qa
          tf_command: apply
      - scale-services:
          name: scale down poller service for migration qa
          requires: [run and monitor jenkins restore job qa]
          replicas: "0"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmqa"
      - run_task:
          name: migration - initialise environments 1 qa
          requires: [
            build infra qa,
            run and monitor jenkins restore job qa,
            scale down poller service for migration qa
         ]
          runner_command: migration-initialise-pre-delete
          tf_workspace: qa
      - run_task:
          name: migration - load casrec qa
          requires: [migration - initialise environments 1 qa]
          tf_workspace: qa
          runner_command: migration-load-casrec
      - run_task:
          name: migration - initialise environments 2 qa
          requires: [migration - load casrec qa]
          runner_command: migration-initialise-post-delete
          tf_workspace: qa
      - run_task:
          name: migration - filter data qa
          requires: [migration - initialise environments 2 qa]
          tf_workspace: qa
          runner_command: migration-filter-data
      - run_task:
          name: migration - transform qa
          requires: [migration - filter data qa]
          tf_workspace: qa
          runner_command: migration-transform
      - run_task:
          name: migration - integration qa
          requires: [migration - transform qa]
          tf_workspace: qa
          runner_command: migration-integration
      - run_task:
          name: migration - load sirius qa
          requires: [migration - integration qa]
          tf_workspace: qa
          runner_command: migration-load-sirius
      - run_task:
          name: migration - validation qa
          requires: [migration - load sirius qa]
          tf_workspace: qa
          runner_command: migration-validation
      - scale-services:
          name: scale up poller service for migration qa
          requires: [migration - validation qa]
          replicas: "1"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmqa"
      - tag_image_for_environment:
          name: tag image for production
          environment_tag: production
          previous_tag: qa
          requires: [migration - validation qa]
      - run_elasticsearch_reset:
          name: full reindex elasticsearch qa
          requires: [migration - validation qa]
          tf_workspace: qa
      - job_complete:
          name: job complete notification
          requires: [migration - validation qa]
          workspace: qa

  production_1:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_production_1 >>
    jobs:
      - persist_parameters:
          name: persist parameters production
          param_workspace: production
          environment_title: Rehearsal-Manual
      - get_latest_image:
          name: get latest tag production
          requires: [persist parameters production]
          image_tag: production
      - infrastructure:
          name: plan infra production
          requires: [get latest tag production]
          tf_workspace: production
          tf_command: plan
      - infrastructure:
          name: build infra production
          requires: [plan infra production]
          tf_workspace: production
          tf_command: apply
      - run_task:
          name: migration - initialise environments 1 production
          requires: [build infra production]
          runner_command: migration-initialise-pre-delete
          tf_workspace: production
      - run_task:
          name: migration - load casrec production
          requires: [migration - initialise environments 1 production]
          tf_workspace: production
          runner_command: migration-load-casrec
      - run_task:
          name: migration - initialise environments 2 production
          requires: [migration - load casrec production]
          runner_command: migration-initialise-post-delete
          tf_workspace: production
      - run_task:
          name: migration - filter data production
          requires: [migration - initialise environments 2 production]
          tf_workspace: production
          runner_command: migration-filter-data
      - run_task:
          name: migration - transform production
          requires: [migration - filter data production]
          tf_workspace: production
          runner_command: migration-transform
      - run_task:
          name: migration - integration production
          requires: [migration - transform production]
          tf_workspace: production
          runner_command: migration-integration
      - job_complete:
          name: job complete notification
          requires: [migration - integration production]
          workspace: production

  production_2:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_production_2 >>
    jobs:
      - persist_parameters:
          name: persist parameters production
          param_workspace: production
          environment_title: Rehearsal-Manual
      - get_latest_image:
          name: get latest tag production
          requires: [persist parameters production]
          image_tag: production
      - run_task:
          name: migration - load sirius production
          requires: [get latest tag production]
          tf_workspace: production
          runner_command: migration-load-sirius
      - run_task:
          name: migration - validation production
          requires: [migration - load sirius production]
          tf_workspace: production
          runner_command: migration-validation
      - job_complete:
          name: job complete notification
          requires: [migration - validation production]
          workspace: production

  production_3:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_production_3 >>
    jobs:
      - persist_parameters:
          name: persist parameters production
          param_workspace: production
          environment_title: Rehearsal-Manual
      - get_latest_image:
          name: get latest tag production
          requires: [persist parameters production]
          image_tag: production
      - run_task:
          name: migration - response api tests production
          requires: [get latest tag production]
          tf_workspace: production
          runner_command: migration-response-api-tests
      - run_task:
          name: migration - light touch api tests production
          requires: [migration - response api tests production]
          tf_workspace: production
          runner_command: migration-light-touch-api-tests
      - run_elasticsearch_reset:
          name: full reindex elasticsearch production
          requires: [migration - light touch api tests production]
          tf_workspace: production
      - job_complete:
          name: job complete notification
          requires: [full reindex elasticsearch production]
          workspace: production

  rehearsal_1:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_rehearsal_1 >>
    jobs:
      - persist_parameters:
          name: persist parameters rehearsal
          param_workspace: rehearsal
          environment_title: Rehearsal-Manual
      - get_latest_image:
          name: get latest tag rehearsal
          requires: [persist parameters rehearsal]
          image_tag: rehearsal
      - infrastructure:
          name: plan infra rehearsal
          requires: [get latest tag rehearsal]
          tf_workspace: rehearsal
          tf_command: plan
      - infrastructure:
          name: build infra rehearsal
          requires: [plan infra rehearsal]
          tf_workspace: rehearsal
          tf_command: apply
      - run_task:
          name: migration - initialise environments 1 rehearsal
          requires: [build infra rehearsal]
          runner_command: migration-initialise-pre-delete
          tf_workspace: rehearsal
      - run_task:
          name: migration - load casrec rehearsal
          requires: [migration - initialise environments 1 rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-load-casrec
      - run_task:
          name: migration - initialise environments 2 rehearsal
          requires: [migration - load casrec rehearsal]
          runner_command: migration-initialise-post-delete
          tf_workspace: rehearsal
      - run_task:
          name: migration - filter data rehearsal
          requires: [migration - initialise environments 2 rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-filter-data
      - run_task:
          name: migration - transform rehearsal
          requires: [migration - filter data rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-transform
      - run_task:
          name: migration - integration rehearsal
          requires: [migration - transform rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-integration
      - job_complete:
          name: job complete notification
          requires: [migration - integration rehearsal]
          workspace: rehearsal

  rehearsal_2:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_rehearsal_2 >>
    jobs:
      - persist_parameters:
          name: persist parameters rehearsal
          param_workspace: rehearsal
          environment_title: Rehearsal-Manual
      - get_latest_image:
          name: get latest tag rehearsal
          requires: [persist parameters rehearsal]
          image_tag: rehearsal
      - run_task:
          name: migration - load sirius rehearsal
          requires: [get latest tag rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-load-sirius
      - run_task:
          name: migration - validation rehearsal
          requires: [migration - load sirius rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-validation
      - job_complete:
          name: job complete notification
          requires: [migration - validation rehearsal]
          workspace: rehearsal

  rehearsal_3:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - << pipeline.parameters.run_rehearsal_3 >>
    jobs:
      - persist_parameters:
          name: persist parameters rehearsal
          param_workspace: rehearsal
          environment_title: Rehearsal-Manual
      - get_latest_image:
          name: get latest tag rehearsal
          requires: [persist parameters rehearsal]
          image_tag: rehearsal
      - run_task:
          name: migration - response api tests rehearsal
          requires: [get latest tag rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-response-api-tests
      - run_task:
          name: migration - light touch api tests rehearsal
          requires: [migration - response api tests rehearsal]
          tf_workspace: rehearsal
          runner_command: migration-light-touch-api-tests
      - run_elasticsearch_reset:
          name: full reindex elasticsearch rehearsal
          requires: [migration - light touch api tests rehearsal]
          tf_workspace: rehearsal
      - job_complete:
          name: job complete notification
          requires: [full reindex elasticsearch rehearsal]
          workspace: rehearsal

  nightly_development_restore:
    triggers:
      - schedule:
          cron: "30 07 * * *"
          filters: {branches:{only:[main]}}
    jobs:
      - persist_parameters:
          name: persist parameters development
          param_workspace: development
          environment_title: Development-Nightly
          filters: {branches:{only:[main]}}
      - reset_sirius_full_restore:
          name: run and monitor jenkins restore job development
          requires: [persist parameters development]
          sirius_environment: casmigrate
          filters: {branches:{only:[main]}}

  nightly_preproduction_run:
    triggers:
      - schedule:
          cron: "10 03 * * *"
          filters: {branches:{only:[main]}}
    jobs:
      - persist_parameters:
          name: persist parameters preproduction
          param_workspace: preproduction
          environment_title: Preproduction-Nightly
          filters: {branches:{only:[main]}}
      - get_latest_image:
          name: get latest tag preproduction
          requires: [persist parameters preproduction]
          image_tag: main
          filters: {branches:{only:[main]}}
      - reset_sirius_full_restore:
          name: run and monitor jenkins restore job preproduction
          requires: [persist parameters preproduction]
          sirius_environment: casrecdmpp
          filters: {branches:{only:[main]}}
      - infrastructure:
          name: build shared infra preproduction
          requires: [get latest tag preproduction]
          tf_workspace: preproduction
          tf_command: apply
          folder: shared
          filters: {branches:{only:[main]}}
      - infrastructure:
          name: build infra preproduction
          requires: [build shared infra preproduction]
          tf_workspace: preproduction
          tf_command: apply
          filters: {branches:{only:[main]}}
      - scale-services:
          name: scale down poller service for migration preproduction
          requires: [run and monitor jenkins restore job preproduction]
          replicas: "0"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmpp"
          filters: {branches:{only:[main]}}
      - run_task:
          name: migration - initialise environments 1 preproduction
          requires: [
            build infra preproduction,
            run and monitor jenkins restore job preproduction,
            scale down poller service for migration preproduction
         ]
          runner_command: migration-initialise-pre-delete
          tf_workspace: preproduction
      - run_task:
          name: migration - load casrec preproduction
          requires: [migration - initialise environments 1 preproduction]
          tf_workspace: preproduction
          runner_command: migration-load-casrec
      - run_task:
          name: migration - initialise environments 2 preproduction
          requires: [migration - load casrec preproduction]
          runner_command: migration-initialise-post-delete
          tf_workspace: preproduction
      - run_task:
          name: migration - filter data preproduction
          requires: [migration - initialise environments 2 preproduction]
          tf_workspace: preproduction
          runner_command: migration-filter-data
          filters: {branches:{only:[main]}}
      - run_task:
          name: migration - transform preproduction
          requires: [migration - filter data preproduction]
          tf_workspace: preproduction
          runner_command: migration-transform
          filters: {branches:{only:[main]}}
      - run_task:
          name: migration - integration preproduction
          requires: [migration - transform preproduction]
          tf_workspace: preproduction
          runner_command: migration-integration
          filters: {branches:{only:[main]}}
      - run_task:
          name: migration - load sirius preproduction
          requires: [migration - integration preproduction]
          tf_workspace: preproduction
          runner_command: migration-load-sirius
          filters: {branches:{only:[main]}}
      - run_task:
          name: migration - validation preproduction
          requires: [migration - load sirius preproduction]
          tf_workspace: preproduction
          runner_command: migration-validation
          filters: {branches:{only:[main]}}
      - run_task:
          name: migration - response api tests preproduction
          requires: [migration - validation preproduction]
          notify_validation_fails: true
          tf_workspace: preproduction
          runner_command: migration-response-api-tests
          filters: {branches:{only:[main]}}
      - scale-services:
          name: scale up poller service for migration preproduction
          requires: [migration - light touch api tests preproduction]
          replicas: "1"
          profile: "migrations-ci-sirius-pre"
          service: "notify-poller"
          cluster: "casrecdmpp"
          filters: {branches:{only:[main]}}
      - tag_image_for_environment:
          name: tag image for qa
          environment_tag: qa
          requires: [migration - response api tests preproduction]
          filters: {branches:{only:[main]}}
      - run_elasticsearch_reset:
          name: full reindex elasticsearch preproduction
          requires: [migration - response api tests preproduction]
          tf_workspace: preproduction
          filters: {branches:{only:[main]}}
      - kick_off_environment:
          name: kick off preqa
          workspace: preqa
          requires: [tag image for qa]
          filters: {branches:{only:[main]}}
      - run_task:
          name: migration - light touch api tests preproduction
          requires: [kick off preqa]
          tf_workspace: preproduction
          runner_command: migration-light-touch-api-tests
          filters: {branches:{only:[main]}}
      - job_complete:
          name: job complete notification
          requires: [
              kick off preqa,
              scale up poller service for migration preproduction
          ]
          workspace: preproduction
          filters: {branches:{only:[main]}}

orbs:
  aws-cli: circleci/aws-cli@1.3.0

  dockerhub_helper:
    orbs:
      docker: circleci/docker@1.4.0
    commands:
      dockerhub_login:
        steps:
          - docker/install-docker-credential-helper
          - docker/check:
              docker-password: DOCKER_ACCESS_TOKEN # pragma: allowlist secret
              docker-username: DOCKER_USER
  terraform:
    executors:
      terraform:
        docker:
          - image: circleci/golang:1.12
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
        resource_class: small
        environment:
          TF_VERSION: 1.1.5
          TF_SHA256SUM: 30942d5055c7151f051c8ea75481ff1dc95b2c4409dbb50196419c21168d6467 # pragma: allowlist secret
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
    commands:
      install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin

      setup_ecs_runner:
        steps:
          - run:
              name: Set image tag var where it exists
              command: |
                if test -f ~/project/VERSION
                then
                  VERSION=${VERSION:-$(cat ~/project/VERSION 2>/dev/null)}
                fi
                echo "export TF_VAR_image_tag=${VERSION}" >> $BASH_ENV
          - run:
              name: Initialize
              command: terraform init
          - run:
              name: Get template file
              command: |
                terraform apply
          - run:
              name: Install ecs-runner
              command: |
                wget https://github.com/ministryofjustice/opg-ecs-helper/releases/download/v0.2.0/opg-ecs-helper_Linux_x86_64.tar.gz -O $HOME/opg-ecs-helper.tar.gz
                sudo tar -xvf $HOME/opg-ecs-helper.tar.gz -C /usr/local/bin
                sudo chmod +x /usr/local/bin/ecs-stabilizer
                sudo chmod +x /usr/local/bin/ecs-runner

  migration:
    executors:
      python:
        docker:
          - image: cimg/python:3.9.5
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
    commands:
      login_codeartifact:
        steps:
          - run:
              name: install aws cli
              command: |
                pip3 install awscli --upgrade --user
          - run:
              name: login to code artifact for pip
              command: ./login_code_artifact.sh -a 288342028542 -t pip
              working_directory: ~/project/scripts/ci_scripts
      cancel_redundant_builds:
        steps:
          - run:
              name: install cancel build requirements
              command: pip3 install -r requirements.txt
              working_directory: ~/project/scripts/ci_scripts
          - run:
              name: cancel previous builds
              command: |
                python3 cancel_builds.py \
                --circle_project_username="${CIRCLE_PROJECT_USERNAME}" \
                --circle_project_reponame="${CIRCLE_PROJECT_REPONAME}" \
                --circle_branch="${CIRCLE_BRANCH}" \
                --circle_builds_token="${CIRCLE_BUILDS_TOKEN}" \
                --terms_to_waitfor="plan infra" \
                --prod_job_terms="build infra ,main"
              working_directory: ~/project/scripts/ci_scripts
          - run:
              name: wait for others builds to finish
              command: |
                python3 circle_job_waiter.py \
                --circle_builds_token "${CIRCLE_BUILDS_TOKEN}" \
                --circle_project_username "${CIRCLE_PROJECT_USERNAME}" \
                --circle_project_reponame "${CIRCLE_PROJECT_REPONAME}"
              working_directory: ~/project/scripts/ci_scripts
  notififications:
    orbs:
      slack: circleci/slack@4.1
    commands:
      notify_env_vars:
        steps:
          - attach_workspace: {at: ~/project}
          - run:
              name: set environment variables
              when: always
              command: |
                COMMIT_MESSAGE=`git log --oneline -1`
                echo "export COMMIT_MESSAGE=\"${COMMIT_MESSAGE}\"" >> $BASH_ENV
                if [ ${#CIRCLE_USERNAME} -eq 0 ]
                  then echo "export CIRCLE_USERNAME=\"scheduled_user\"" >> $BASH_ENV
                fi
                if [ ${#CI_PULL_REQUEST} -eq 0 ]
                  then echo "export CI_PULL_REQUEST=\"${CIRCLE_BUILD_URL}\"" >> $BASH_ENV
                fi

                if [ -f ENTITIES ]; then
                    ENTITIES=$(cat ENTITIES)
                else
                    ENTITIES="None"
                fi
                echo "export ENTITIES=\"${ENTITIES}\"" >> $BASH_ENV

                if [ -f ENVIRONMENT_TITLE ]; then
                    ENVIRONMENT_TITLE=$(cat ENVIRONMENT_TITLE)
                else
                    ENVIRONMENT_TITLE="Development"
                fi
                echo "export ENVIRONMENT_TITLE=\"${ENVIRONMENT_TITLE}\"" >> $BASH_ENV
              working_directory: ~/project
      notify_if_success:
        steps:
          - slack/notify:
              channel: opg-migration-builds
              event: pass
              custom: |
                {
                    "blocks": [
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": ":github-tick: *Build to ${ENVIRONMENT_TITLE} successful*"
                            }
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": "*Branch*: ${CIRCLE_BRANCH}\n\n*Commit Message*: ${COMMIT_MESSAGE}\n\n"
                            }
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": "*Kicked off by:* ${CIRCLE_USERNAME}\n\n*Entities*: ${ENTITIES}\n"
                            }
                        },
                        {
                            "type": "divider"
                        },
                        {
                            "type": "actions",
                            "elements": [
                                {
                                    "type": "button",
                                    "text": {
                                        "type": "plain_text",
                                        "text": "Go to Pull Request",
                                        "emoji": true
                                    },
                                    "value": "github_pr",
                                    "url": "${CI_PULL_REQUEST}"
                                },
                                {
                                    "type": "button",
                                    "text": {
                                        "type": "plain_text",
                                        "text": "Go to Circle Job",
                                        "emoji": true
                                    },
                                    "value": "circle_job",
                                    "url": "${CIRCLE_BUILD_URL}"
                                }
                           ]
                        }
                   ]
                }
      notify_if_fail:
        steps:
          - slack/notify:
              channel: opg-migration-builds
              event: fail
              custom: |
                {
                    "blocks": [
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": ":x::dancebadger: *Build to ${ENVIRONMENT_TITLE} failed*"
                            }
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": "*Branch*: ${CIRCLE_BRANCH}\n\n*Commit Message*: ${COMMIT_MESSAGE}\n\n*Stage Failed*: ${CIRCLE_STAGE}"
                            }
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": "*Kicked off by:* ${CIRCLE_USERNAME}\n\n*Entities*: ${ENTITIES}\n"
                            }
                        },
                        {
                            "type": "divider"
                        },
                        {
                            "type": "actions",
                            "elements": [
                                {
                                    "type": "button",
                                    "text": {
                                        "type": "plain_text",
                                        "text": "Go to Pull Request",
                                        "emoji": true
                                    },
                                    "value": "github_pr",
                                    "url": "${CI_PULL_REQUEST}"
                                },
                                {
                                    "type": "button",
                                    "text": {
                                        "type": "plain_text",
                                        "text": "Go to Circle Job",
                                        "emoji": true
                                    },
                                    "value": "circle_job",
                                    "url": "${CIRCLE_BUILD_URL}"
                                }
                           ]
                        }
                   ]
                }
      notify_validation_results:
        steps:
          - slack/notify:
              channel: casrec-migration-standup
              custom: |
                {
                    "blocks": [
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": ":see_no_evil: *Validation results for ${ENVIRONMENT_TITLE}*\n*In the format: (entity-failed_count)*"
                            }
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": "${V_ERR_1}\n${V_ERR_2}\n${V_ERR_3}\n${V_ERR_4}\n${V_ERR_5}"
                            }
                        },
                        {
                           "type": "actions",
                           "elements": [
                               {
                                   "type": "button",
                                   "text": {
                                       "type": "plain_text",
                                       "text": "Go to Circle Job",
                                       "emoji": true
                                   },
                                   "value": "circle_job",
                                   "url": "${CIRCLE_BUILD_URL}"
                               }
                          ]
                        }
                   ]
                }
jobs:
  persist_parameters:
    executor: migration/python
    resource_class: small
    parameters:
      param_workspace:
        description: workspace to use
        type: string
        default: "development"
      environment_title:
        description: environment title
        type: string
        default: "Development-Branch"
    steps:
      - checkout
      - attach_workspace: {at: ~/project}
      - run:
          name: pip requirements
          when: always
          command: pip3 install boto3 click
      - run:
          name: set environment variables
          when: always
          command: |
            python3 scripts/ci_scripts/get_environment_entities.py --environment << parameters.param_workspace >> --role migrations-ci --param allowed-entities > ENTITIES
            echo << parameters.environment_title >> > ENVIRONMENT_TITLE
            python3 scripts/ci_scripts/get_environment_entities.py --environment << parameters.param_workspace >> --role migrations-ci --param ci-enabled > ENABLED
      - run:
          name: fail if environment not enabled
          when: always
          command: |
            ENABLED=$(cat ENABLED)
            echo "ci-enabled param is set to: ${ENABLED}"
            if [ "${ENABLED}" = "0" ]
            then
              exit 1
            fi
      - persist_to_workspace:
          root: .
          paths:
            - ENTITIES
            - ENVIRONMENT_TITLE
  manage_workflow:
    executor: migration/python
    resource_class: small
    parameters:
      tf_workspace:
        description: workspace to use
        type: string
        default: "development"
    environment:
      TF_WORKSPACE: << parameters.tf_workspace >>
    steps:
      - checkout
      - attach_workspace: {at: ~/project}
      - migration/login_codeartifact
      - migration/cancel_redundant_builds
      - notififications/notify_env_vars
      - notififications/notify_if_fail
  kick_off_environment:
    executor: migration/python
    resource_class: small
    parameters:
      workspace:
        description: workspace to use
        type: string
        default: "development"
    environment:
      WORKSPACE: << parameters.workspace >>
    steps:
      - checkout
      - run:
          name: set environment variables
          command: |
            if [ ${WORKSPACE} == "preproduction" ]
            then
              RUN_PREPROD="true"
              RUN_QA="false"
              RUN_PRE_QA="false"
            elif [ ${WORKSPACE} == "qa" ]
            then
              RUN_PREPROD="false"
              RUN_QA="true"
              RUN_PRE_QA="false"
            elif [ ${WORKSPACE} == "preqa" ]
            then
              RUN_PREPROD="false"
              RUN_QA="false"
              RUN_PRE_QA="true"
            else
              RUN_PREPROD="false"
              RUN_QA="false"
              RUN_PRE_QA="false"
            fi
            echo "export RUN_PREPROD=${RUN_PREPROD}" >> $BASH_ENV
            echo "export RUN_QA=${RUN_QA}" >> $BASH_ENV
            echo "export RUN_PRE_QA=${RUN_PRE_QA}" >> $BASH_ENV
      - run:
          name: kick off << parameters.workspace >> job
          command: |
            curl --request POST \
            --url https://circleci.com/api/v2/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
            --header "Circle-Token: ${CIRCLE_BUILDS_TOKEN}" \
            --header 'content-type: application/json' \
            --data "{\"branch\":\"main\", \"parameters\":{\"run_main\": false, \"run_preprod\": $RUN_PREPROD, \"run_qa\": $RUN_QA, \"run_preqa\": $RUN_PRE_QA}}"
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  tag_image_for_environment:
    executor: migration/python
    resource_class: small
    parameters:
      environment_tag:
        description: environment tag for where image can be used
        type: string
        default: "development"
      previous_tag:
        description: environment tag for where image can be used
        type: string
        default: "main"
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
      ENVIRONMENT_TAG: << parameters.environment_tag >>
      PREVIOUS_TAG: << parameters.previous_tag >>
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace: {at: ~/project}
      - aws-cli/install
      - setup_remote_docker
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Show version before tagging
          command: echo ${VERSION}
      - run:
          name: ECR login
          command: aws ecr get-login-password --region $AWS_REGION --profile migrations-ci | docker login --username AWS --password-stdin $AWS_REGISTRY
      - run:
          name: Pull images
          command: docker-compose -f docker-compose.ci.yml pull
      - run:
          name: Set new tag
          command: |
            NEW_TAG="${ENVIRONMENT_TAG}"-`echo ${VERSION} | awk '-F-' '{print $2}'`
            echo "export NEW_TAG=${NEW_TAG}" >> $BASH_ENV
      - run:
          name: Retag images
          command: |
            for i in `docker image ls | grep "${PREVIOUS_TAG}-" | awk '{print $1":"$2}'`
            do
              docker tag $i `echo $i | awk '-F:' '{print $1":"}'`${NEW_TAG}
            done
      - run:
          name: Update tag to push
          command: echo "export VERSION=${NEW_TAG}" >> $BASH_ENV
      - run:
          name: Push images
          command: |
            echo $VERSION
            echo $NEW_TAG
            echo ${AWS_REGISTRY}/casrec-migration/etl0:${VERSION}
            docker image ls
            docker-compose -f docker-compose.ci.yml push
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  run_task:
    executor: terraform/terraform
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: "development"
      runner_command:
        description: ecs command to run
        type: string
        default: "api-tests"
      timeout:
        description: runner timeout
        type: string
        default: "18000"
      notify_validation_fails:
        description: if we want to send validation failures
        type: boolean
        default: false
    environment:
      TF_WORKSPACE: << parameters.tf_workspace >>
      AWS_CONFIG_FILE: ~/project/aws_config
    working_directory: ~/project/terraform/environment
    steps:
      - checkout:
          path: ~/project
      - attach_workspace: {at: ~/project}
      - terraform/install
      - terraform/setup_ecs_runner
      - run:
          name: Run task
          command: ecs-runner -task << parameters.runner_command >> -timeout << parameters.timeout >>
          no_output_timeout: 180m
      - when:
          condition: << parameters.notify_validation_fails >>
          steps:
            - aws-cli/install
            - run:
                name: download results file
                command: aws s3 cp s3://casrec-migration-preproduction/validation/report/report_table.txt . --profile migrations-ci-sirius-pre
            - run:
                name: export variables for notification
                command: |
                  cat report_table.txt | awk -F'|' '$8>0' | awk -F'|' '{print $3 $8}' | awk '{$1=$1;print}' | tr ' ' '-' > error_list.txt
                  i=1; while read line$((i++)); do :;done < error_list.txt
                  echo "export V_ERR_1=${line1}" >> $BASH_ENV
                  echo "export V_ERR_2=${line2}" >> $BASH_ENV
                  echo "export V_ERR_3=${line3}" >> $BASH_ENV
                  echo "export V_ERR_4=${line4}" >> $BASH_ENV
                  echo "export V_ERR_5=${line5}" >> $BASH_ENV
            - notififications/notify_validation_results
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  run_tasks:
    executor: terraform/terraform
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: "development"
      timeout:
        description: runner timeout
        type: string
        default: "18000"
    environment:
      TF_WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/terraform/environment
    steps:
      - checkout:
          path: ~/project
      - attach_workspace: {at: ~/project}
      - terraform/install
      - terraform/setup_ecs_runner
      - run:
          name: Run initialise environments part 1 task
          command: ecs-runner -task migration-initialise-pre-delete -timeout << parameters.timeout >>
      - run:
          name: Run load casrec task
          command: ecs-runner -task migration-load-casrec -timeout << parameters.timeout >>
      - run:
          name: Run initialise environments part 2 task
          command: ecs-runner -task migration-initialise-post-delete -timeout << parameters.timeout >>
      - run:
          name: Run filter data task
          command: ecs-runner -task migration-filter-data -timeout << parameters.timeout >>
      - run:
          name: Run transform task
          command: ecs-runner -task migration-transform -timeout << parameters.timeout >>
      - run:
          name: Run integration task
          command: ecs-runner -task migration-integration -timeout << parameters.timeout >>
      - run:
          name: Run load sirius task
          command: ecs-runner -task migration-load-sirius -timeout << parameters.timeout >>
      - run:
          name: Run validation task
          command: ecs-runner -task migration-validation -timeout << parameters.timeout >>
      - run:
          name: Run response api tests task
          command: ecs-runner -task migration-response-api-tests -timeout << parameters.timeout >>
      - run:
          name: Run functional api tests task
          command: ecs-runner -task migration-functional-api-tests -timeout << parameters.timeout >>
      - run:
          name: Run light touch api tests task
          command: ecs-runner -task migration-light-touch-api-tests -timeout << parameters.timeout >>
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  run_elasticsearch_reset:
    executor: terraform/terraform
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: "development"
    environment:
      TF_WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/terraform/environment
    steps:
      - checkout:
          path: ~/project
      - attach_workspace: {at: ~/project}
      - terraform/install
      - terraform/setup_ecs_runner
      - run:
          name: Reset Elasticsearch
          command: ecs-runner -task reindex-elasticsearch-by-date -timeout 18000
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  reset_sirius:
    executor: terraform/terraform
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: "development"
    environment:
      TF_WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/terraform/environment
    steps:
      - checkout:
          path: ~/project
      - attach_workspace: {at: ~/project}
      - terraform/install
      - terraform/setup_ecs_runner
      - run:
          name: Reset Api
          command: ecs-runner -task reset-api -timeout 600
      - run:
          name: Reset Membrane
          command: ecs-runner -task reset-membrane -timeout 600
      - run:
          name: Migrate Api
          command: ecs-runner -task migrate-api -timeout 600
      - run:
          name: Migrate Membrane
          command: ecs-runner -task migrate-membrane -timeout 600
      - run:
          name: Import Fixtures to Api
          command: ecs-runner -task import-fixtures-api -timeout 600
      - run:
          name: Import Fixtures to Membrane
          command: ecs-runner -task import-fixtures-membrane -timeout 600
      - run:
          name: Ingest Cases
          command: ecs-runner -task ingest-cases -timeout 600
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  build_short:
    executor: migration/python
    resource_class: small
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - dockerhub_helper/dockerhub_login
      - checkout
      - setup_remote_docker
      - run:
          name: Export version as latest
          command: echo "export VERSION=latest" >> $BASH_ENV
      - run:
          name: Switch out docker-compose.override file
          command: |
            echo "Switching override so we do not use volume mounts"
            rm docker-compose.override.yml
            mv docker-compose.override.ci.yml docker-compose.override.yml
      - run:
          name: Build base image
          command: docker build base_image -t opg_casrec_migration_base_image:latest
      - run:
          name: Build images
          command: docker-compose -f docker-compose.ci.yml build --parallel
      - run:
          name: Run unit tests
          command: docker-compose up unit_tests
      - run:
          name: Full local migration run through
          command: ./migrate.sh

  build:
    executor: migration/python
    resource_class: small
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - dockerhub_helper/dockerhub_login
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/install
      - checkout
      - attach_workspace: {at: ~/project}
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Set version
          command: |
            export VERSION=${TF_WORKSPACE}-${CIRCLE_SHA1:0:7}
            echo "export VERSION=${VERSION}" >> $BASH_ENV
            echo "$VERSION" >> ~/project/VERSION
      - persist_to_workspace:
          root: .
          paths:
            - VERSION
      - run:
          name: Show version
          command: echo ${VERSION}
      - run:
          name: Docker login
          command: aws ecr get-login-password --region $AWS_REGION --profile migrations-ci | docker login --username AWS --password-stdin $AWS_REGISTRY
      - run:
          name: Build base image
          command: docker build base_image -t opg_casrec_migration_base_image:latest
      - run:
          name: Build images
          command: docker-compose -f docker-compose.ci.yml build --parallel
      - run:
          name: Switch out docker-compose.override file
          command: |
            echo "Switching override so we do not use volume mounts"
            rm docker-compose.override.yml
            mv docker-compose.override.ci.yml docker-compose.override.yml
      - run:
          name: Run unit tests
          command: docker-compose up unit_tests
      - run:
          name: Full local migration run through
          command: ./migrate.sh
      - run:
          name: Push images
          command: docker-compose -f docker-compose.ci.yml push
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  infrastructure:
    executor: terraform/terraform
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        type: string
      folder:
        description: terraform command
        type: string
        default: "environment"
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/terraform/<< parameters.folder >>
    steps:
      - checkout:
          path: ~/project
      - terraform/install
      - attach_workspace: {at: ~/project}
      - run:
          name: Initialize
          command: terraform init
      - run:
          name: Set environment
          command: |
            ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Run << parameters.tf_command >>
          command: terraform << parameters.tf_command >>
      - run:
          name: Output
          command: terraform output -json > terraform.output.json
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  get_latest_image:
    executor: migration/python
    resource_class: small
    parameters:
      image_tag:
        description: image tag to use
        type: string
        default: "main"
      check_preprod_run:
        description: check that preprod has run successfully
        type: boolean
        default: false
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
      IMAGE_TAG: << parameters.image_tag >>
    steps:
      - checkout
      - attach_workspace: {at: ~/project}
      - run:
          name: Install requirements
          command: pip install boto3 click
      - run:
          name: Set latest version
          command: |
            if [ "<< pipeline.parameters.override_tag >>" == "" ]
            then
              python get_image.py --role migrations-ci --image_tag ${IMAGE_TAG} >> ~/project/VERSION
            else
              echo << pipeline.parameters.override_tag >> >> ~/project/VERSION
            fi
          working_directory: ~/project/scripts/ci_scripts
      - run:
          name: Show latest version
          command: cat ~/project/VERSION
      - persist_to_workspace:
          root: .
          paths:
            - VERSION
      - when:
          condition: << parameters.check_preprod_run >>
          steps:
            - run:
                name: Run preprod previous build success test
                command: python3 last_pre_migration_success.py --role migrations-ci
                working_directory: ~/project/scripts/ci_scripts
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  reset_sirius_full_restore:
    executor: migration/python
    resource_class: small
    parameters:
      sirius_environment:
        description: environment for notifications
        type: string
        default: "casrecdmpp"
    environment:
      SIRIUS_ENVIRONMENT: << parameters.sirius_environment >>
    steps:
      - checkout
      - attach_workspace: {at: ~/project}
      - run:
          name: run and monitor jenkins job
          command: ./run_jenkins_job.sh -w ${SIRIUS_ENVIRONMENT} -k ${JENKINS_API_KEY}
          working_directory: ~/project/scripts/ci_scripts
      - when:
          condition:
            and:
              - equal: [casmigrate, << parameters.sirius_environment >>]
          steps:
            - run:
                name: Run extend casmigrate ttl
                when: always
                command: |
                  pip3 install boto3 click
                  python3 extend_casmigrate_ttl.py --role migrations-ci
                working_directory: ~/project/scripts/ci_scripts
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  load_casrec_db:
    executor: migration/python
    resource_class: small
    parameters:
      account:
        description: environment for step function
        type: string
        default: "development"
    environment:
      ACCOUNT: << parameters.account >>
    steps:
      - checkout:
          path: ~/project
      - attach_workspace: {at: ~/project}
      - run:
          name: Check on log
          command: |
            if [ `git log --raw -n 1 | grep -E "^:[0-9]{6}" | awk '{print $6}' \
            | grep -E '(migration_steps/load_casrec|terraform/environment/terraform.tfvars.json)' | wc -l` -gt 0 ] \
            || [ "${ACCOUNT}" = "development" ]
            then
              echo "export RUN_RELOAD=true" >> $BASH_ENV
            else
              echo "export RUN_RELOAD=false" >> $BASH_ENV
            fi
      - run:
          name: install requirements
          command: |
            if [ $RUN_RELOAD == "true" ]
            then
              pip3 install -r requirements-rsf.txt
            fi
          working_directory: ~/project/scripts/ci_scripts
      - run:
          name: run the load casrec step function
          command: |
            if [ $RUN_RELOAD == "true" ]
            then
              python3 run_step_function.py --role migrations-ci --account << parameters.account >> --workspace << parameters.account >> --sf_name_suffix=casrec-mig-load-state-machine
            fi
          working_directory: ~/project/scripts/ci_scripts
      - notififications/notify_env_vars
      - notififications/notify_if_fail

  job_complete:
    executor: migration/python
    resource_class: small
    parameters:
      workspace:
        description: workspace to get entities from
        type: string
        default: "development"
    steps:
      - checkout:
          path: ~/project
      - attach_workspace: {at: ~/project}
      - run:
          name: Job Completed Successfully
          command: echo "Job Completed Successfully"
      - notififications/notify_env_vars
      - notififications/notify_if_fail
      - notififications/notify_if_success

  scale-services:
    docker:
      - image: circleci/python:3
        auth:
          username: $DOCKER_USER
          password: $DOCKER_ACCESS_TOKEN
    resource_class: small
    working_directory: ~/project/environment
    parameters:
      replicas:
        description: number of replicas
        type: string
        default: "1"
      profile:
        description: profile to use
        type: string
        default: "migrations-ci-sirius-dev"
      service:
        description: service name
        type: string
        default: ""
      cluster:
        description: cluster name
        type: string
        default: ""
    environment:
      AWS_CONFIG_FILE: ~/project/aws_config
    steps:
      - checkout:
          path: ~/project
      - attach_workspace: {at: ~/project}
      - aws-cli/install
      - run:
          name: scale services
          command: aws ecs update-service --service << parameters.service >> --cluster << parameters.cluster >> --desired-count << parameters.replicas >> --profile << parameters.profile >>
      - notififications/notify_env_vars
      - notififications/notify_if_fail
